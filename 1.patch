diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d10c27c
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,14 @@
+{
+    "files.associations": {
+        "stat.h": "c",
+        "user.h": "c",
+        "param.h": "c",
+        "pstat.h": "c",
+        "defs.h": "c",
+        "proc.h": "c",
+        "istream": "c",
+        "locale": "c",
+        "__mutex_base": "c"
+    },
+    "C_Cpp.errorSquiggles": "disabled"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..39f876a 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testticket\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..65368cd 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -187,3 +188,7 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// my functions
+int setticket(struct proc *, int);
+int getpinfo(uint64);
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..ea38097 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -47,6 +48,7 @@ proc_mapstacks(pagetable_t kpgtbl)
 void
 procinit(void)
 {
+  printf("procinit\n");
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
@@ -54,6 +56,7 @@ procinit(void)
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
+      p->original_ticket =  100;
       p->kstack = KSTACK((int) (p - proc));
   }
 }
@@ -109,6 +112,7 @@ allocpid()
 static struct proc*
 allocproc(void)
 {
+  printf("allocproc\n");
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++) {
@@ -169,6 +173,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->original_ticket = 100;
+  p->current_ticket = 100;
+  p->time_slice = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -279,6 +286,7 @@ growproc(int n)
 int
 fork(void)
 {
+  printf("fork\n");
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
@@ -316,11 +324,16 @@ fork(void)
 
   acquire(&wait_lock);
   np->parent = p;
+  np->original_ticket = p->original_ticket;
   release(&wait_lock);
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  np->current_ticket = np->original_ticket;
+  np->time_slice = 0;
+  // pstat.pid[]
   release(&np->lock);
+  // printf("opening\n");
 
   return pid;
 }
@@ -360,6 +373,8 @@ exit(int status)
     }
   }
 
+  // printf("exiting\n");
+
   begin_op();
   iput(p->cwd);
   end_op();
@@ -434,6 +449,13 @@ wait(uint64 addr)
   }
 }
 
+float randomNumber(int seed)
+{
+  int a = seed * 15485863;
+  return (a * a * a % 2038074743) / 2038074743.0;
+  // return a;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -451,14 +473,40 @@ scheduler(void)
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    // int total_ticket = 0;
+    // for (p = proc; p < &proc[NPROC]; p++)
+    // {
+    //   acquire(&p->lock);
+    //   total_ticket += p->current_ticket;
+    //   release(&p->lock);
+    // }
+    
+    // float random = randomNumber(total_ticket);
+    // float probability_till_now = 0;
+    // printf("random = %f\n", random);
 
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
+      // probability_till_now += ((float)p->current_ticket / total_ticket);
+      // if(random < probability_till_now && (p->state == RUNNABLE || p->state == RUNNING)) {
+      //   p->state = RUNNING;
+      //   p->time_slice++;
+      //   p->current_ticket--;
+      //   p->current_ticket = p->current_ticket <= 0 ? p->original_ticket : p->current_ticket;
+      //   c->proc = p;
+      //   swtch(&c->context, &p->context);
+
+      //   // Process is done running for now.
+      //   // It should have changed its p->state before coming back.
+      //   c->proc = 0;
+      // }
       if(p->state == RUNNABLE) {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
+        // before jumping back to us.p->state = RUNNING;
+        p->time_slice++;
+        p->current_ticket--;
+        p->current_ticket = p->current_ticket <= 0 ? p->original_ticket : p->current_ticket;
         c->proc = p;
         swtch(&c->context, &p->context);
 
@@ -681,3 +729,34 @@ procdump(void)
     printf("\n");
   }
 }
+
+int setticket(struct proc *p, int ticket) {
+  // check for negative ticket
+  if(ticket < 0) return -1;
+  acquire(&p->lock);
+  p->original_ticket = ticket;
+  p->current_ticket = ticket;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(uint64 addr) {
+  int idx = 0;
+  struct pstat pstat;
+  struct proc *proc = myproc();
+  for(struct proc *p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    // printf("%d %d\n", idx, p->pid);
+    pstat.pid[idx] = p->pid ;
+    pstat.inuse[idx] = !(p->state == UNUSED) ;
+    pstat.tickets_original[idx] = p->original_ticket;
+    pstat.tickets_current[idx] = p->current_ticket;
+    pstat.time_slices[idx] = p->time_slice;
+    idx++;
+    release(&p->lock);
+  }
+
+  if (copyout(proc->pagetable, addr, (char *)&pstat, sizeof(pstat)) < 0)
+    return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..9e23fb2 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int original_ticket;
+  int current_ticket;
+  int time_slice;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..e57d908 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setticket(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setticket]   sys_setticket,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..5736575 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setticket  22
+#define SYS_getpinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3c2d336 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,23 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setticket(void)
+{
+  struct proc *p = myproc();
+  int ticket;
+  argint(0, &ticket);
+  return setticket(p, ticket);
+  
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  // printf("%d\n", aa);
+  return getpinfo(addr);
+  
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..a90d20f
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,43 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int
+main(int argc, char *argv[])
+{
+  // int i;
+  // char *nargv[MAXARG];
+
+//   if(ticket == 0) {
+//     fprintf(2, "Usage: %s num_of_tickets [num_of_tickets > 0]\n", argv[0]);
+//     exit(1);
+//   }
+
+  // handle negative number of tickets
+
+  struct pstat pstat;
+  printf("%d\n", &pstat);
+
+  if (getpinfo(&pstat) < 0) {
+    fprintf(2, "%s: ticket set failed\n", argv[0]);
+    exit(1);
+  }
+
+  for (int i = 0; i < NPROC; i++)
+  {
+    if(pstat.inuse[i] == 1) {
+      printf("id = %d\t inuse = %d\t original ticket = %d\t current ticket = %d\t time slice=%d\n", pstat.pid[i],pstat.inuse[i],pstat.tickets_original[i],pstat.tickets_current[i], pstat.time_slices[i]);
+    }
+  }
+  
+
+  // while(1);
+  
+  // for(i = 2; i < argc && i < MAXARG; i++){
+  //   nargv[i-2] = argv[i];
+  // }
+  // exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..59408b8
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,34 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  // int i;
+  // char *nargv[MAXARG];
+
+  int ticket = atoi(argv[1]);
+  if(ticket == 0) {
+    fprintf(2, "Usage: %s num_of_tickets [num_of_tickets > 0]\n", argv[0]);
+    exit(1);
+  }
+
+  // handle negative number of tickets
+
+  
+
+  if (setticket(ticket) < 0) {
+    fprintf(2, "%s: ticket set failed\n", argv[0]);
+    exit(1);
+  }
+
+  while(1);
+  
+  // for(i = 2; i < argc && i < MAXARG; i++){
+  //   nargv[i-2] = argv[i];
+  // }
+  // exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..8d026f7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setticket(int);
+int getpinfo(void *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f5a2b1f 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setticket");
+entry("getpinfo");
